{"version":3,"file":"s3-core.module.js","sourceRoot":"/","sources":["s3-core.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,2CAA+E;AAE/E,2CAAgD;AAChD,sDAAkD;AAClD,qCAAuE;AAKvE,IAAa,YAAY,oBAAzB,MAAa,YAAY;IAEd,MAAM,CAAC,OAAO,CAAC,OAAwB;QAC1C,MAAM,QAAQ,GAAG,6BAAiB,CAAC,OAAO,CAAC,CAAC;QAE5C,OAAO;YACH,OAAO,EAAE,CAAC,QAAQ,CAAC;YACnB,MAAM,EAAE,cAAY;YACpB,SAAS,EAAE,CAAC,QAAQ,CAAC;SACxB,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAA6B;QACpD,MAAM,QAAQ,GAAa;YACvB,MAAM,EAAE,CAAC,0BAAiB,CAAC;YAC3B,OAAO,EAAE,iBAAQ;YACjB,UAAU,EAAE,CAAC,OAAwB,EAAE,EAAE,CAAC,uBAAc,CAAC,OAAO,CAAC;SACpE,CAAC;QAEF,OAAO;YACH,OAAO,EAAE,CAAC,QAAQ,EAAE,sBAAS,CAAC;YAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,cAAY;YACpB,SAAS,EAAE;gBACP,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;gBACrC,QAAQ;gBACR,sBAAS;aACZ;SACJ,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAC/B,OAA6B;QAE7B,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC7C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAwC,CAAC;QAClE,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,QAAQ;gBACjB,QAAQ;aACT;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACvC,OAA6B;QAE7B,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,0BAAiB;gBAC1B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CAAC;SACH;QACD,MAAM,MAAM,GAAG;YACb,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAAiC;SAC1E,CAAC;QACF,OAAO;YACL,OAAO,EAAE,0BAAiB;YAC1B,UAAU,EAAE,CAAO,cAAsC,EAAE,EAAE,gDAC3D,OAAA,MAAM,cAAc,CAAC,qBAAqB,EAAE,CAAA,GAAA;YAC9C,MAAM;SACP,CAAC;IACJ,CAAC;CACN,CAAA;AAnEY,YAAY;IAFxB,eAAM,EAAE;IACR,eAAM,CAAC,EAAE,CAAC;GACE,YAAY,CAmExB;AAnEY,oCAAY","sourcesContent":["import { Global, Module, DynamicModule, Provider, Type } from \"@nestjs/common\";\nimport { S3ConfigOptions, S3ConfigAsyncOptions, S3ConfigOptionsFactory } from \"./interfaces\";\nimport { createS3Providers } from \"./providers\";\nimport { S3Service } from \"./services/s3.service\";\nimport { S3_CONFIG_OPTIONS, S3_TOKEN, createS3Client } from \"./common\";\n\n\n@Global()\n@Module({})\nexport class S3CoreModule {\n\n    public static forRoot(options: S3ConfigOptions): DynamicModule {\n        const provider = createS3Providers(options);\n\n        return {\n            exports: [provider],\n            module: S3CoreModule,\n            providers: [provider]\n        };\n    }\n\n    public static forRootAsync(options: S3ConfigAsyncOptions): DynamicModule {\n        const provider: Provider = {\n            inject: [S3_CONFIG_OPTIONS],\n            provide: S3_TOKEN,\n            useFactory: (options: S3ConfigOptions) => createS3Client(options),\n        };\n\n        return {\n            exports: [provider, S3Service],\n            imports: options.imports,\n            module: S3CoreModule,\n            providers: [\n                ...this.createAsyncProviders(options),\n                provider,\n                S3Service\n            ],\n        };\n    }\n\n    private static createAsyncProviders(\n        options: S3ConfigAsyncOptions,\n      ): Provider[] {\n        if (options.useExisting || options.useFactory) {\n          return [this.createAsyncOptionsProvider(options)];\n        }\n        const useClass = options.useClass as Type<S3ConfigOptionsFactory>;\n        return [\n          this.createAsyncOptionsProvider(options),\n          {\n            provide: useClass,\n            useClass,\n          },\n        ];\n      }\n    \n      private static createAsyncOptionsProvider(\n        options: S3ConfigAsyncOptions,\n      ): Provider {\n        if (options.useFactory) {\n          return {\n            inject: options.inject || [],\n            provide: S3_CONFIG_OPTIONS,\n            useFactory: options.useFactory,\n          };\n        }\n        const inject = [\n          (options.useClass || options.useExisting) as Type<S3ConfigOptionsFactory>,\n        ];\n        return {\n          provide: S3_CONFIG_OPTIONS,\n          useFactory: async (optionsFactory: S3ConfigOptionsFactory) =>\n            await optionsFactory.createS3ConfigOptions(),\n          inject,\n        };\n      }\n}"]}